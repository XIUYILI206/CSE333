✅ 是的！private 变量不能在 main() 或者非这个class直接访问！
✅ 但可以在 public 方法里访问 private 变量，然后 main() 通过这些方法访问它们。

#include <iostream>

class Point3D {
private:
    int x, y, z;

public:
    // ✅ Corrected: Assign parameters to member variables
    Point3D(int x_value = 0, int y_value = 0, int z_value = 0) {
        x = x_value;  // ✅ Correct assignment
        y = y_value;
        z = z_value;
    }

    void print() const {
        std::cout << "Point: (" << x << ", " << y << ", " << z << ")" << std::endl;
    }
};

int main() {
    Point3D p(7, 8, 9);
    p.print();  // Expected Output: Point: (7, 8, 9)

    return 0;
}



_________________

#include <iostream>

class Point3D {
private:
    int x, y, z;

public:
    // ✅ Task 1: Implement a default constructor
Point3D(){
 x= 0;
 y=0;
 z=0;
}

    // ✅ Task 2: Implement a constructor with three parameters
Point3D(int x_value, int y_value,int z_value){
    x = x_value;
    y = y_value;
    z = z_value;

}

    // ✅ Task 3: Implement a function print() to print x, y, z
void print (){
        std::cout << "Point: (" << x << ", " << y << ", " << z << ")" << std::endl;
}
};

int main() {
    Point3D p1;  // Should initialize to (0,0,0)
    Point3D p2(5, 10, 15);  // Should initialize to (5,10,15)

    p1.print();
    p2.print();

    return 0;
}

________________________________________________________
#include <iostream>

class Rectangle {
private:
    int width, height;

public:
    // ✅ Task 1: Implement default constructor (width = 1, height = 1)
    Rectangle() {
        width = 1;
        height = 1;
    }

    // ✅ Task 2: Implement parameterized constructor
    Rectangle(int width_value, int height_value) {
        width = width_value;
        height = height_value;
    }

    // ✅ Task 3: Implement copy constructor
    Rectangle(const Rectangle& other) {
        width = other.width;
        height = other.height;
    }

    // ✅ Task 4: Implement print function
    void print() {
        std::cout << "Rectangle: Width = " << width << ", Height = " << height << std::endl;
    }
};

int main() {
    Rectangle r1;      // Calls default constructor
    Rectangle r2(5, 6); // Calls parameterized constructor
    Rectangle r3 = r2; // Calls copy constructor

    r1.print();  // Output: Rectangle: Width = 1, Height = 1
    r2.print();  // Output: Rectangle: Width = 5, Height = 6
    r3.print();  // Output: Rectangle: Width = 5, Height = 6

    return 0;
}

______________________________________________
#include <iostream>

class Circle {
private:
    double radius, area;

public:
    // ✅ Default Constructor
    Circle() {
        radius = 0;
        area = 0;
    }

    // ✅ Parameterized Constructor
    Circle(double radi_value) {
        radius = radi_value;
        area = 3.14 * radius;  // Correctly calculate area
    }

    // ✅ Copy Constructor
    Circle(const Circle &others) {
        radius = others.radius;
        area = others.area;
    }

    // ✅ Print Function
    void print() const {
        std::cout << "Circle: Radius = " << radius << ", Area = " << area << std::endl;
    }
};

int main() {
    Circle c1(1);
    Circle c2(3);
    Circle c3 = c2;  // Copy constructor

    c1.print();  // Expected: "Circle: Radius = 1, Area = 3.14"
    c2.print();  // Expected: "Circle: Radius = 3, Area = 28.26"
    c3.print();  // Expected: "Circle: Radius = 3, Area = 28.26"

    return 0;
}


